//	Copyright (C) 2017 Thomas Duployez (CMDR Touille)
//	V2.2.03.4b	2017/02
//	Distributed freely under the MIT License.
//	
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in all
//	copies or substantial portions of the Software.
//	
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//	SOFTWARE.
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	VARIABLES USED IN FUNCTION																																	//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	//Hardware
	int vJoystickCurveProfile;					//initSetJoystickCurves()	initJoystickCurves()	initToggleEnhancedFAOFF()
	int vJoystickCurveProfileBackup;			//initToggleEnhancedFAOFF()
	int vThrottleCurveProfile;					//initSetThrottleCurves()
	
	//Game
	int vSecureEscapeFight;						//initSecureRectract()	initToggleLandingGear()	initToggleCargoScoop()	initToggleHardpoints()
	int vLG;									//initToggleLandingGear()
	int vCS;									//initToggleCargoScoop()
	int vFA;									//initToggleEnhancedFAOFF()		Flight Assist [TOGGLE] Mode Ingame
	
	//initVoicePTT()	
	int vVoicePTT;
	int vPTT;
	int vVoice;	
	
	//initToggleSilentRuning()
	int vSilentRuningBackup;					//initFire()
	int vSLonFire;								//initFire()
	int vSLonEscapeFight;						//initEscapeFight()
	int vSLonGameMenu;							//initToggleGameMenu()
	int vSLonCamera;							//initToggleCamera()
	
	//initFire()
	int vPrimaryFire;							//initPrimaryFire()
	int vSecondaryFire;							//initSecondaryFire()
	int vScanPrimaryFire;
	int vScanSecondaryFire;
	
	//LED Management : initLED()
	int LED_DEVICE;
	int LED_OUTPOUT;
	//------------Throttle
	int flagHover_T_LED1;						//flashing_T_LED1()
	int flagHover_T_LED2;						//flashing_T_LED2()
	int flagHover_T_LED3;						//flashing_T_LED3()
	int flagHover_T_LED4;						//flashing_T_LED4()
	int flagHover_T_LED5;						//flashing_T_LED5()
	//------------Right MFD
	define RMFD_LED1			0x40			//Right MFD LED1
	define RMFD_LED2			0x400			//Right MFD LED2	
	int flagHover_RMFD_LED1;					//flashing_RMFD_LED1()
	int flagHover_RMFD_LED2;					//flashing_RMFD_LED2()
	//------------Left MFD
	define LMFD_LED1			0x50			//Left MFD LED1
	define LMFD_LED2			0x500			//Left MFD LED1	
	int flagHover_LMFD_LED1;					//flashing_LMFD_LED1()
	int flagHover_LMFD_LED2;					//flashing_LMFD_LED2()

	//BACKLIGHT Management : initBACKLIGHT()
	int BACKLIGHT_DEVICE;
	//------------Throttle
	define Throttle_BL			0x60
//	int vThrottleLight;
	int vThrottleLightBackup;					
	int flagHover_T_BL;							//flashing_T_BL()
	//------------Right MFD
	define RMFD_BL				0x70
//	int vRMFDLight;
	int vRMFDLightBackup;
	int flagHover_RMFD_BL;						//flashing_RMFD_BL()
	//------------Left MFD
	define LMFD_BL				0x80
//	int vLMFDLight;
	int vLMFDLightBackup;
	int flagHover_LMFD_BL;						//flashing_LMFD_BL()
	//------------For the Fun
	int PANIC_LED = 1;
	
//	--PIP Management--------------------------------------------------------------------------------------------------------------------------------------------//
	
	//initPIPPower()
//	int M_Crew;
	int vOptimalPIP;
	int vPIP;
	int PIPx, PIPy, PIPz;
	define SYS 1
	define ENG 2
	define WEP 3
	define MID 4

	//initPIPBackup()
	int vPIPB;
	int vOptimalPIPFireBackup;					//initFire()
	define OptimalPIPFireBackup  1
	int vOptimalPIPHPBackup;					//initToggleHardpoints()
	define OptimalPIPHPBackup    2
	int vOptimalPIPEFBackup;					//initEscapeFight()
	define OptimalPIPEFBackup    3
	int vOptimalPIPGMBackup;					//initToggleGameMenu()
	define OptimalPIPGMBackup    4
	int vOptimalPIPCCBackup;					//initToggleCamera()
	define OptimalPIPCCBackup    5
//	int vOptimalPIPBoostBackup;					//initThrottleBoost()
//	define OptimalPIPBoostBackup 6
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	TOGGLE STATES																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	//Extra
	int sVoiceAttack;			//initToggleVoiceAttackMic()		Voice Attack Mic
	int sNVidiaCaptureVideo;	//initCaptureVideo()				Nvidia Shadowplay Capture
	int sAMDCaptureVideo;		//initCaptureVideo()				AMD Relive Capture
	int sNVidiaStreaming;		//initStreamingVideo()				Nvidia Shadowplay Streaming
	int sAMDStreaming;			//initStreamingVideo()				AMD Relive Streaming

	//Game
	int sIDLE;					//initToggleIDLEonThrottle()		Throttle IDLE
	int sRT;					//initToggleReverseThrottle()		Reverse Throttle
	int sFlightAssist;			//initToggleEnhancedFAOFF()			Flight Assist
	int sGameMenu;				//initGameMenu()					Game Menu
	int sHeadLook;				//initToogleHeadLook()				Head Look
	int sExplorerMode;			//initToggleExplorerMode()			Desactivate Functions for Exploring (OptimalPIPMode when fire, StopFireRetractHardpoints ...)
	int sCameraMode;			//initToggleCamera()				Classified Camera
	int sSilentRuning;			//initToggleSilentRuning()			Silent Runing
	
	//If Misaligned With Game [S3]+Toggle The Switch
	int sHardPoints;			//initToggleHardpoints()			HardPoints
	int sGears;					//initToggleLandingGear()			Landing Gears
	int sCargo;					//initToggleCargoScoop()			Cargo Scoop
	int sLights;				//initToggleLights()				ShipLights