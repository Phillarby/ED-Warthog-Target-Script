//	Copyright (C) 2017 Thomas Duployez (CMDR Touille)
//	V2.2.03.4b	2017/02
//	Distributed freely under the MIT License.
//	
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in all
//	copies or substantial portions of the Software.
//	
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//	SOFTWARE.
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	PIP MANAGEMENT FUNCTIONS																																	//
//		initPIPPower(x,y,z)	Params = SYS, ENG, WEP, MID																											//
//			x gets 4 PIPs, y gets 2 PIPs, if z = MID get 50/50 of x and y (3x 3y)																				//
//			If only x, balanced 1 PIP on each 2ndary power																										//
//			If no params, balances power.																														//
//		initRestorePIPPower(j)	Params = vOptimalPIP[XXXXX]Backup	(ex: initRestorePIPPower(vOptimalPIPFireBackup) )											//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	//PIP Management
	int initPIPPower(int x=0, int y=0, int z=0){

		// Check Which Command to Send and if it need to be Send
		if(x == 0 & y == 0 & z == 0){if(vOptimalPIP != 0){vOptimalPIP = 0; vPIP=!vPIP;}}	//2 SYS 2 ENG 2 WEP (0)
		else if(z != MID | z == 0){
			if(y != 0){
				if(y == SYS){
					if     (x == ENG){if(vOptimalPIP != 1){vOptimalPIP = 1; vPIP=!vPIP;}}	//4 ENG 2 SYS (1)
					else if(x == WEP){if(vOptimalPIP != 6){vOptimalPIP = 6; vPIP=!vPIP;}}	//4 WEP 2 SYS (6)
				}
				else if(y == ENG){
					if     (x == SYS){if(vOptimalPIP != 3){vOptimalPIP = 3; vPIP=!vPIP;}}	//4 SYS 2 ENG (3)
					else if(x == WEP){if(vOptimalPIP != 5){vOptimalPIP = 5; vPIP=!vPIP;}}	//4 WEP 2 ENG (5)
				}
				else if(y == WEP){
					if     (x == SYS){if(vOptimalPIP != 4){vOptimalPIP = 4; vPIP=!vPIP;}}	//4 SYS 2 WEP (4)
					else if(x == ENG){if(vOptimalPIP != 2){vOptimalPIP = 2; vPIP=!vPIP;}}	//4 ENG 2 WEP (2)
				}
			}
			else if(y == 0){
				if     (x == SYS){if(vOptimalPIP != 10){vOptimalPIP = 10; vPIP=!vPIP;}}		//4 SYS 1 ENG 1 WEP (10)
				else if(x == ENG){if(vOptimalPIP != 11){vOptimalPIP = 11; vPIP=!vPIP;}}		//4 ENG 1 WEP 1 SYS (11)
				else if(x == WEP){if(vOptimalPIP != 12){vOptimalPIP = 12; vPIP=!vPIP;}}		//4 WEP 1 SYS 1 ENG (12)
			}
		}
		else if(z == MID){	
			if     (y == SYS & x == ENG | y == ENG & x == SYS){if(vOptimalPIP != 7){vOptimalPIP = 7; vPIP=!vPIP;}}	//3 SYS 3 ENG (7)
			else if(y == ENG & x == WEP | y == WEP & x == ENG){if(vOptimalPIP != 8){vOptimalPIP = 8; vPIP=!vPIP;}}	//3 ENG 3 WEP (8)
			else if(y == SYS | x == WEP | y == WEP | x == SYS){if(vOptimalPIP != 9){vOptimalPIP = 9; vPIP=!vPIP;}}	//3 SYS 3 WEP (9)
		}
		if(vPIP){	//If Previous Command is NOT the same as the New one, Push Command
			vPIP=!vPIP;
			if(DebugMode) printf("Initialising PIP Mode	[%d]\x0a", vOptimalPIP);
			
			// Map out PIPs
			if(x == 0) PIPx = 0;
			else if(x == SYS) PIPx = PULSE+ PowerSys;
			else if(x == ENG) PIPx = PULSE+ PowerEng;
			else if(x == WEP) PIPx = PULSE+ PowerWep;
			
			if(y == 0) PIPy = 0;
			else if(y == SYS) PIPy = PULSE+ PowerSys;
			else if(y == ENG) PIPy = PULSE+ PowerEng;
			else if(y == WEP) PIPy = PULSE+ PowerWep;
			
			if(z == 0 & z != MID) PIPz = 0;
			else if(z == MID) PIPz = PIPy;
			
			// Send PIPS WIll keep both function if we need to reverse later (witout and with Lock)
			
			//Without Lock
			//ActKey(KEYON+ CHAIN(PULSE+ BalancePower, D(PIPPulseDelay),PIPx, D(PIPPulseDelay),PIPy, D(PIPPulseDelay),PIPx, D(PIPPulseDelay),PIPx, D(PIPPulseDelay),PIPz));
			
			//With Lock
			ActKey(KEYON+ CHAIN(LOCK+PULSE+ BalancePower, D(PIPPulseDelay),PIPx, D(PIPPulseDelay),PIPy, D(PIPPulseDelay),PIPx, D(PIPPulseDelay),PIPx, D(PIPPulseDelay),PIPz, LOCK));
		
		}
		else{
			//if(DebugMode) printf("This PIP is Already Pushed	[%d]\x0a", vOptimalPIP);	
		}			
	}

	//PIP Restore Management
	int initRestorePIPPower(int j=0){
		if(j != vOptimalPIP){	// Send Good Backup PIPS only if previous PIP Swith is != of Backuped Value
			//if(DebugMode){printf("Reset PIP ?: PIPRestore [%d] vOptimalPIP [%d]\x0a", j, vOptimalPIP);}
			if(DebugMode) printf("Restore Previous PIP [%d] (preset PIP 1-12)\x0a",j);
			if     (j == 0)  initPIPPower();             //2 SYS 2 ENG 2 WEP (0)
			else if(j == 1)  initPIPPower(ENG,SYS);      //4 ENG	2 SYS (1)
			else if(j == 2)  initPIPPower(ENG,WEP);      //4 ENG 2 WEP (2)
			else if(j == 3)  initPIPPower(SYS,ENG);      //4 SYS 2 ENG (3)
			else if(j == 4)  initPIPPower(SYS,WEP);      //4 SYS 2 WEP (4)
			else if(j == 5)  initPIPPower(WEP,ENG);      //4 WEP 2 ENG (5)
			else if(j == 6)  initPIPPower(WEP,SYS);      //4 WEP 2 SYS (6)
			else if(j == 7)  initPIPPower(SYS,ENG,MID);  //3 SYS 3 ENG (7)
			else if(j == 8)  initPIPPower(ENG,WEP,MID);  //3 ENG 3 WEP (8)
			else if(j == 9)  initPIPPower(SYS,WEP,MID);  //3 SYS 3 WEP (9)	
			else if(j == 10) initPIPPower(SYS);          //4 SYS 1 ENG 1 WEP (10)
			else if(j == 11) initPIPPower(ENG);          //4 ENG 1 SYS 1 WEP (11)
			else if(j == 12) initPIPPower(WEP);          //4 WEP 1 SYS 1 ENG (12)
		}
		else{
			//if(DebugMode)printf("This PIP is Already OK	[%d]\x0a", vOptimalPIP);	
		}
	}
	
	//PIP Backup Management
	int initBackupPIPPower(int p=0){
		if(p == 1 | p == 2 | p == 3 | p == 4 | p == 5){
			if     (p == 1){if(vOptimalPIPFireBackup != vOptimalPIP & vOptimalPIP != 6){vOptimalPIPFireBackup = vOptimalPIP; vPIPB=!vPIPB;}}	//OptimalPIPFireBackup (1) if the PIP it already 4 WEP 2 SYS (6) we don't save it again
			else if(p == 2){if(vOptimalPIPHPBackup   != vOptimalPIP){                   vOptimalPIPHPBackup   = vOptimalPIP; vPIPB=!vPIPB;}}	//OptimalPIPHPBackup   (2) 4 WEP 2 SYS (6)
			else if(p == 3){if(vOptimalPIPEFBackup   != vOptimalPIP){                   vOptimalPIPEFBackup   = vOptimalPIP; vPIPB=!vPIPB;}}	//OptimalPIPEFBackup   (3) 4 ENG 2 SYS (1) & 4 SYS 2 ENG (3)
			else if(p == 4){if(vOptimalPIPGMBackup   != vOptimalPIP){                   vOptimalPIPGMBackup   = vOptimalPIP; vPIPB=!vPIPB;}}	//OptimalPIPGMBackup   (4) 4 SYS 2 ENG (3)
			else if(p == 5){if(vOptimalPIPCCBackup   != vOptimalPIP){                   vOptimalPIPCCBackup   = vOptimalPIP; vPIPB=!vPIPB;}}	//OptimalPIPCCBackup   (5) 4 SYS 2 ENG (3)
//			else if(p == 6){if(vOptimalPIPBoostBackup!= vOptimalPIP){                   vOptimalPIPBoostBackup= vOptimalPIP; vPIPB=!vPIPB;}}	//OptimalPIPBoostBackup(6) 4 ENG 2 SYS (1)			
		}
		if(vPIPB){
			vPIPB=!vPIPB;
			if(DebugMode) printf("Backuped PIP [%d] (1Fire,2HP,3EF,4GM,5CC) Previous PIP [%d]\x0a",p, vOptimalPIP);
		}
	}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	MAIN GAMES FUNCTIONS																																		//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//--FIRE--------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	//FUNCTION: Init Fire
	int initFire(){
		if(Joystick[TG1] | Joystick[S2]){
			if(SilentRuningOFFonFire & sSilentRuning & !vSLonFire){	//ShutDown Silent Runing if it running
				vSLonFire=!vSLonFire;
				vSilentRuningBackup = sSilentRuning;	//Backup Actual Silent Runing State
				if(DebugMode) printf("Shut Down Silent Runing\x0a");
				initToggleSilentRuning();
			}
			if(HardPointsonFireGameMode & !sHardPoints) initToggleHardpoints();	//Deploy Hardpoint if HardPointsonFireGameMode is Enable
			if(OptimalPIPMode & !sExplorerMode){	//Backup Actual PIP Mode
				initBackupPIPPower(OptimalPIPFireBackup);	//Backup Actual PIP Mode OptimalPIPFireBackup (1)
				initPIPPower(WEP,SYS);	//4 WEP 2 SYS (6)
			}
			if(Joystick[S3]){
				if(Joystick[TG1] & !vScanPrimaryFire) vScanPrimaryFire=!vScanPrimaryFire;
				if((Joystick[S2] | (Joystick[TG2] & sCombinedFire)) & !vScanSecondaryFire) vScanSecondaryFire=!vScanSecondaryFire;
			}
		}
		
		//Fire !!
		initPrimaryFire();
		initSecondaryFire();
		
		if(!Joystick[TG1] & !Joystick[S2]){
			if(OptimalPIPMode & !sExplorerMode) initRestorePIPPower(vOptimalPIPFireBackup);	//Restore Previous PIP Mode
			if(HardPointsonFireGameMode & StopFireRetractHardpoints & sHardPoints & !sExplorerMode) initToggleHardpoints();//Retract Hardpoint if StopFireRetractHardpoints & HardPointsonFireGameMode are Enable
			if(vSilentRuningBackup!=0){	//Restore Silent Runing if it was running before fire
				vSilentRuningBackup = 0;
				if(DebugMode) printf("Restore Silent Runing\x0a");				
				initToggleSilentRuning();	//Restore Silent Runing State
				vSLonFire=!vSLonFire;
			}
		}
		//if(DebugMode)printf("vSLonFire [%d]\x0a", vSLonFire);
	}

	//FUNCTION: init PrimaryFire
	int initPrimaryFire(){
		if((Joystick[TG1] | (Joystick[TG2] & sCombinedFire)) & !vPrimaryFire){
			ActKey(KEYON+DOWN+PrimaryFire);
			vPrimaryFire=!vPrimaryFire;
			//if(DebugMode) printf("TG1 Down\x0a");
		}
		else if(!Joystick[TG1] & vPrimaryFire){
			if((sExplorerMode & !vScanPrimaryFire & (ExploreModeFire == 0 | ExploreModeFire == 2)) | vScanPrimaryFire) DeferCall(TG1ScanDelay, &ActKey, KEYON+UP+PrimaryFire);
			else ActKey(KEYON+UP+PrimaryFire);	//if(DebugMode) printf("TG1 Up\x0a");
			if(vScanPrimaryFire) vScanPrimaryFire=!vScanPrimaryFire;
			vPrimaryFire=!vPrimaryFire;
		}
	}
	
	//FUNCTION: init SecondaryFire
	int initSecondaryFire(){
		if((Joystick[S2] | (Joystick[TG2] & sCombinedFire)) & !vSecondaryFire){
			ActKey(KEYON+DOWN+SecondaryFire);
			vSecondaryFire=!vSecondaryFire;
			//if(DebugMode) printf("S2  Down\x0a");
		}
		else if(!Joystick[S2] & vSecondaryFire){
			if((sExplorerMode & !vScanSecondaryFire & (ExploreModeFire == 1 | ExploreModeFire == 2)) | vScanSecondaryFire) DeferCall(S2ScanDelay, &ActKey, KEYON+UP+SecondaryFire);
			else ActKey(KEYON+UP+SecondaryFire);	//if(DebugMode) printf("S2  Up\x0a");
			if(vScanSecondaryFire) vScanSecondaryFire=!vScanSecondaryFire;
			vSecondaryFire=!vSecondaryFire;
		}
	}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	//FUNCTION: Jettison All Cargo	
	int initJettisonCargo(){
		if(Throttle[APUON]){
			if(sCargo){
				ActKey(KEYON+PULSE+JettisonAllCargo);
				if(DebugMode | DebugMMode) printf("Jettison All Cargo\x0a");
			}
			else{
				if(DebugMode | DebugMMode) printf("Jettison Need Cargo Scoop Open\x0a");
			}
		}
	}

	//FUNCTION: Engine Boost
	int initThrottleBoost(){
//		if(OptimalPIPMode){
//			initBackupPIPPower(OptimalPIPBoostBackup);	//Backup Actual PIP Mode OptimalPIPBoostBackup   (6)
//			initPIPPower(ENG, SYS);	//4 ENG 2 SYS (1)
//			DeferCall(2000, &initRestorePIPPower, vOptimalPIPBoostBackup);	//Restore Previous PIP Mode If vOptimalPIPBoostBackup != 4 ENG 2 SYS (1)
//		}
		initSecureRectract();
		ActKey(KEYON+PULSE+EngineBoost);
		if(DebugMode | DebugMMode) printf("Engine Boost\x0a");
	}

	//FUNCTION: Init Supercruise
	int initSuperCruise(){
//		if(OptimalPIPMode){
//			initBackupPIPPower(OptimalPIPBoostBackup);	//Backup Actual PIP Mode OptimalPIPBoostBackup   (6)
//			initPIPPower(ENG, SYS);	//4 ENG 2 SYS (1)
//			DeferCall(10000, &initRestorePIPPower, vOptimalPIPBoostBackup);	//Restore Previous PIP Mode If vOptimalPIPBoostBackup != 4 ENG 2 SYS (1)
//		}	
		initSecureRectract();
		ActKey(KEYON+PULSE+Supercruise);
		if(DebugMode | DebugMMode) printf("Engage SuperCruise\x0a");
	}
	
	//FUNCTION: Init FrameShiftDrive
	int initFrameShiftDrive(){
//		if(OptimalPIPMode){
//			initBackupPIPPower(OptimalPIPBoostBackup);	//Backup Actual PIP Mode OptimalPIPBoostBackup   (6)
//			initPIPPower(ENG, SYS);	//4 ENG 2 SYS (1)
//			DeferCall(10000, &initRestorePIPPower, vOptimalPIPBoostBackup);	//Restore Previous PIP Mode If vOptimalPIPBoostBackup != 4 ENG 2 SYS (1)
//		}	
		initSecureRectract();
		ActKey(KEYON+PULSE+FrameShiftDrive);
		if(DebugMode | DebugMMode) printf("Engage FSD\x0a");
	}
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	EXTRA GAMES FUNCTIONS																																		//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	//FUNCTION: Init Secure Retract
	int initSecureRectract(){
		if(SecureRetract & (sHardPoints | sCargo | sGears)){	//only if SecureRetract is ON & HardPoints or C Scoop Or L Gears is Deployed
			vSecureEscapeFight=!vSecureEscapeFight;
			if(sHardPoints) initToggleHardpoints();
			if(sGears)      initToggleLandingGear();
			if(sCargo)      initToggleCargoScoop();
			vSecureEscapeFight=!vSecureEscapeFight;
		}
	}
	
	//FUNCTION: SystemJump
	int initSystemJump(){
		if(!SecureRetract & (sHardPoints | sCargo | sGears))initFrameShiftDrive();//IF SecureRectract = 0 Engage FSD To match the game mechanic and don't launch the speed to 0 from mSystemJump Macro if HardPoints or Cargo Scoop Or L Gears Deployed
		else{
			initSecureRectract();
			if(OptimalPIPMode) initPIPPower(ENG, SYS);	//4 ENG	2 SYS (1)
			ActKey(KEYON+PULSE+mSystemJump);
			if(DebugMode | DebugMMode) printf("Engage System Jump\x0a");
		}
	}

	//FUNCTION: Escape Fight	All we want is to Escape Fight so We don't check the OptimalPIPMode states, if you want, you can UnComment the 2 Lines to check Them
	int initEscapeFight(){
		//TEST PANIC MODE
		initBACKLIGHT(Throttle_BL, vThrottleLightBackup, 250);	//Throttle BackLigtt Flashing ON
		init_PANIC_LED(165);
		DeferCall(11000, &ActKey, KEYON+PULSE+EXEC("initBACKLIGHT(Throttle_BL, vThrottleLightBackup, 250);"));	//Throttle BackLigtt Flashing OFF, we need to Send it again to toggle the flag and stop the flashing
		//END OF TEST
		if(!SecureRetract){	//if SecureRetract is Disable
			if(DebugMode) printf("Secure Retract was OFF we switch it to ON for 2 sec for Escaping Fight\x0a");
			SecureRetract=!SecureRetract;	//we Enable it
			DeferCall(2000, &ActKey, KEYON+PULSE+EXEC("SecureRetract=!SecureRetract;")); //Then we Disable it after the initSecureRectract() below is done (2s should be ok)
		}
		initSecureRectract();	//All we want is to Escape so we retract Hardpoints, C.Scoop and L.Gears if deployed
		if(!sSilentRuning & !vSLonEscapeFight){	//If Silent Running is Disable, Enable it
			vSLonEscapeFight=!vSLonEscapeFight;
			initToggleSilentRuning();
		}
		//if(OptimalPIPMode){	//If you want to check if OptimalPIPMode is Enable UnComment this line
			initBackupPIPPower(OptimalPIPEFBackup);	//Backup Actual PIP Mode OptimalPIPEFBackup   (3)
			initPIPPower(ENG, SYS);	//4 ENG 2 SYS (1)
			DeferCall(1500, &ActKey, KEYON+PULSE+EXEC("initPIPPower(SYS, ENG);"));	//4 SYS 2 ENG (3)
			DeferCall(10000, &initRestorePIPPower, vOptimalPIPEFBackup);	//Restore Previous PIP Mode If vOptimalPIPEFBackup != 4 SYS 2 ENG (3)
		//}	//If you want to check if OptimalPIPMode is Enable UnComment this line
		ActKey(KEYON+PULSE+mEscapeFight);
		if(sSilentRuning){		//Disable Silent Runing previouly Enable
			DeferCall(4000, &ActKey, KEYON+PULSE+EXEC("initToggleSilentRuning();"));
			if(vSLonEscapeFight) DeferCall(5000, &ActKey, KEYON+PULSE+EXEC("vSLonEscapeFight=!vSLonEscapeFight;"));
		}
		if(DebugMode | DebugMMode) printf("Escape Mode Engaged : CHECK IF GEARS AND CARGO STATE IS OK (SWITCH CS and LG) \x0a");
	}

	//FUNCTION: Request Docking
	int initRCDocking(){
		if(DebugMode | DebugMMode) printf("Docking Initialisation\x0a");
		initSecureRectract();
		ActKey(KEYON+PULSE+mRequestCancelDock);
		if(OptimalPIPMode) DeferCall(3000, &ActKey, KEYON+PULSE+EXEC("initPIPPower(SYS, ENG);"));	//4 SYS 2 ENG (3)
	}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	EXTRA FUNCTIONS																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	//FUNCTION FPS & CONNECTION STATUS
	int initFPSCONNECTION(){
		ActKey(KEYON+PULSE+ShowFramerate);
		ActKey(KEYON+PULSE+ShowConnectionStatus);
		if(DebugMode) printf("FPS & CONNECTION STATUS\x0a");
	}
	
	//FUNCTION: Head Center
	int initHeadCenter(){
		if(HMD){
			ActKey(KEYON+PULSE+HMDCenter);
			if(DebugMode) printf("HMD Center\x0a");
		}
		else if(TrackIR){
			ActKey(KEYON+PULSE+TrackIRCenter);
			if(DebugMode) printf("TrackIR Center\x0a");
		}
		else{
			ActKey(KEYON+PULSE+UIFocus);
			if(DebugMode) printf("UI Focus\x0a");
		}
	}
	
	//FUNCTION: Capture Video
	int initCaptureVideo(){
		if(GFXVideo == 1){	//Nvidia Shadowplay
			sNVidiaCaptureVideo=!sNVidiaCaptureVideo;
			ActKey(KEYON+PULSE+NVidiaCaptureVideo);
			initLED(NVidiaCaptureVideo_LED, sNVidiaCaptureVideo);
			if(DebugMode | DebugMMode) printf("NVidia ShadowPlay Capture Video [%d]\x0a", sNVidiaCaptureVideo);
		}
		else if(GFXVideo == 2){	//AMD Relive
			sAMDCaptureVideo=!sAMDCaptureVideo;
			ActKey(KEYON+PULSE+AMDCaptureVideo);
			initLED(AMDCaptureVideo_LED, sAMDCaptureVideo);
			if(DebugMode | DebugMMode) printf("AMD Relive Capture Video [%d]\x0a", sAMDCaptureVideo);
		}
		else{
			if(DebugMode | DebugMMode) printf("No Software selected for Capture Video\x0a");	//None
		}
	}

	//FUNCTION: Streaming Video
	int initStreamingVideo(){
		if(GFXVideo == 1){	//Nvidia Shadowplay
			sNVidiaStreaming=!sNVidiaStreaming;
			ActKey(KEYON+PULSE+NVidiaStreaming);
			initLED(NVidiaStreaming_LED, sNVidiaStreaming);
			if(DebugMode | DebugMMode) printf("NVidia ShadowPlay Streaming [%d]\x0a", sNVidiaStreaming);
		}
		else if(GFXVideo == 2){	//AMD Relive
			sAMDStreaming=!sAMDStreaming;
			ActKey(KEYON+PULSE+AMDStreaming);
			initLED(AMDStreaming_LED, sAMDStreaming);
			if(DebugMode | DebugMMode) printf("AMD Relive Streaming [%d]\x0a", sAMDStreaming);
		}
		else{
			if(DebugMode | DebugMMode) printf("No Software selected for Streaming Video\x0a");	//None
		}
	}

	//FUNCTION: Screenshot
	int initScreenshot(){
		if(!UseSteamScreenshot){
			//if(sExplorerMode){
			//	ActKey(KEYON+PULSE+HighResScreenshot);
			//	if(DebugMode)printf("HD Screenshot\x0a");
			//}else{
				ActKey(KEYON+PULSE+Screenshot);
				if(DebugMode | DebugMMode) printf("Screenshot\x0a");
			//}
		}
		else{
			ActKey(KEYON+PULSE+TakeSteamScreenshot);
			if(DebugMode | DebugMMode) printf("Steam Screenshot\x0a");
		}
	}
	
	//FUNCTION: Voice PTT
	int initVoicePTT(){
		if     (sPTTState) vPTT = InternalVoiceCommsPTT;	//External Mic
		else if(!sPTTState)vPTT = ExternalVoiceCommsPTT;	//Internal Mic
		if(Throttle[MSP]){
			vVoicePTT=!vVoicePTT;
			if(sPTTMode){	//TOGGLE
				vVoice=!vVoice;
				ActKey(KEYON+PULSE+vPTT);
				if(DebugMode) printf("Mic Toggle [%d] [Actived[1] DesActived[0] / PTT [%d] [External:[0]Internal:[1]] / Mode [%d] [HOLD:[0] TOGGLE:[1]]\x0a", vVoicePTT, sPTTState, sPTTMode);
			}
			else ActKey(KEYON+DOWN+vPTT);	//Talk [HOLD]
		}
		if(!Throttle[MSP] & !sPTTMode){	//Silence [HOLD]
			vVoicePTT=!vVoicePTT;
			ActKey(KEYON+UP+vPTT);
		}
		initLED(VoicePTT_LED, vVoicePTT);
		if(DebugMode & !sPTTMode) printf("Mic Toggle [%d] [Actived[1] DesActived[0] / PTT [%d] [External:[0]Internal:[1]] / Mode [%d] PUSH:[0] TOGGLE:[1]]\x0a", vVoicePTT, sPTTState, sPTTMode);
	}	